<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Low level on ByteShifters</title>
    <link>https://byteshifters.com/tags/low-level/</link>
    <description>Recent content in Low level on ByteShifters</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://byteshifters.com/tags/low-level/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Custom Encryption Algorithm in Dlang</title>
      <link>https://byteshifters.com/posts/programming/algorithms/dlang/encryption-algorithm-in-dlang/</link>
      <pubDate>Fri, 04 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/algorithms/dlang/encryption-algorithm-in-dlang/</guid>
      
      <description>Implementing a Custom Encryption Algorithm in D Language In this blog post, we will implement a custom encryption algorithm in the D programming language. The encryption process will involve encrypting a message, decrypting it back to its original form, and displaying the results. Furthermore, we will analyze static analysis tools available in various programming languages and evaluate their effectiveness against malware detection.
Overview of the Encryption Algorithm Encryption algorithms are critical in securing data, ensuring confidentiality and integrity.</description>
      
    </item>
    
    <item>
      <title>Domain Generation Algorithms and Automatic Domain Registration in C2</title>
      <link>https://byteshifters.com/posts/system-security/malware-techniques/domain-name-generation-and-registration-in-c2/</link>
      <pubDate>Fri, 04 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/system-security/malware-techniques/domain-name-generation-and-registration-in-c2/</guid>
      
      <description>Domain Generation Algorithms and Automatic Domain Registration Domain Generation Algorithms (DGAs) are critical tools used in various applications, including both legitimate and malicious domains. This blog post discusses how DGAs function and demonstrates how to automatically register the generated domains using the Namecheap API.
What is a Domain Generation Algorithm (DGA)? A Domain Generation Algorithm (DGA) is a technique used primarily in malware to generate domain names that are used for command and control (C2) operations.</description>
      
    </item>
    
    <item>
      <title>Custom linux kernel Hooks with eBPF</title>
      <link>https://byteshifters.com/posts/programming/ebpf/custom-ebpf-hooks-linux/custom-ebpf-hooks-in-linux-kernel/</link>
      <pubDate>Wed, 02 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/ebpf/custom-ebpf-hooks-linux/custom-ebpf-hooks-in-linux-kernel/</guid>
      
      <description>Introduction to eBPF: Developing Custom Hooks in the Linux Kernel eBPF (Extended Berkeley Packet Filter) is a powerful Linux kernel technology that enables the development of custom tracing, networking, and security tools. By creating highly efficient and flexible hooks into the kernel, eBPF allows for deep insights into system behavior and high-performance packet filtering.
In this guide, weâ€™ll cover the fundamentals of developing eBPF hooks, exploring the tools required, and providing code snippets to help you get started on your journey with eBPF.</description>
      
    </item>
    
    <item>
      <title>Introduction to ARM Architecture</title>
      <link>https://byteshifters.com/posts/programming/introduction-to-arm-architecture/</link>
      <pubDate>Sat, 21 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/introduction-to-arm-architecture/</guid>
      
      <description>Introduction to ARM Architecture ARM is a widely-used architecture in various devices due to its efficiency and power-saving features. Understanding ARM assembly provides you with the ability to write low-level code that directly interacts with hardware.
ARM Versions ARM has several versions, including ARMv7 (32-bit) and ARMv8 (64-bit). Each version introduces new instructions and capabilities.
Basic Concepts Registers Registers are crucial for ARM assembly programming. Each register has specific roles:</description>
      
    </item>
    
    <item>
      <title>Introduction to x64 ASM</title>
      <link>https://byteshifters.com/posts/programming/x64-asm/introduction-to-x64-asm/</link>
      <pubDate>Sat, 21 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/x64-asm/introduction-to-x64-asm/</guid>
      
      <description>1. Introduction to Assembly and x64 Architecture What is Assembly Language? Assembly language is a low-level programming language that is closely related to machine code. Each instruction corresponds directly to machine instructions executed by the CPU. Unlike high-level languages, assembly is architecture-specific, meaning that assembly code written for one architecture (e.g., x86) won&amp;rsquo;t work on another (e.g., ARM).
In this tutorial, we&amp;rsquo;ll focus on x64 assembly, the 64-bit extension of the x86 architecture.</description>
      
    </item>
    
    <item>
      <title>Introduction to Windows Syscalls</title>
      <link>https://byteshifters.com/posts/windows/syscalls-in-windows/</link>
      <pubDate>Tue, 17 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/windows/syscalls-in-windows/</guid>
      
      <description>Introduction to Syscalls in Windows System calls, or syscalls, are the primary means through which applications interact with the operating system (OS). They provide a controlled interface for programs to request services from the OS kernel, such as file operations, process management, and communication. This introduction will delve into Windows system calls, their structure, advanced usage, performance considerations, and best practices.
What are System Calls? System calls act as a bridge between user applications and the kernel, allowing applications to execute privileged operations safely.</description>
      
    </item>
    
    <item>
      <title>Linux Syscalls Table</title>
      <link>https://byteshifters.com/posts/linux/syscalls-table/</link>
      <pubDate>Fri, 13 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/linux/syscalls-table/</guid>
      
      <description>Overview This table lists the Linux system call numbers for the x86-64 architecture, starting from 2013, and provides detailed information such as the syscall name, arguments, and direct links to their manual pages and implementation in the kernel source code.
Data Source The data is extracted from the syscall_64.tbl file in the Linux 6.7 kernel source and the syscalls.h header file. The syscalls themselves are implemented as functions named in the Entry Point column and generated using the DEFINE_SYSCALLx macros.</description>
      
    </item>
    
    <item>
      <title>Advanced C Programming Best Practices</title>
      <link>https://byteshifters.com/posts/programming/c/best-practices-in-c/</link>
      <pubDate>Mon, 29 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/c/best-practices-in-c/</guid>
      
      <description>Introduction C programming is foundational for systems-level development and applications that demand high performance and low-level memory management. This document provides a comprehensive guide to writing secure, maintainable, and efficient C code, informed by practices used in industry-leading organizations like NASA and Google.
Secure Coding Practices Input Validation Always validate inputs to avoid vulnerabilities such as buffer overflows and injection attacks.
Input Type Recommended Practices Strings Use strncpy, snprintf for safer handling.</description>
      
    </item>
    
    <item>
      <title>Hooking `getdents64` to Hide Directories in Linux</title>
      <link>https://byteshifters.com/posts/system-security/malware-techniques/hide-dir-with-syscall-hooks/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/system-security/malware-techniques/hide-dir-with-syscall-hooks/</guid>
      
      <description>Hooking getdents64 to Hide Directories in Linux Syscall hooking is a technique used in operating system development to intercept system calls made by user-space applications. This allows developers to modify or monitor the behavior of those calls without altering the application code. One common use case is hiding files or directories, which can be useful for security applications or debugging.
Use Cases Use Case Description Security Monitoring Intercept system calls to monitor suspicious activity.</description>
      
    </item>
    
  </channel>
</rss>
